@using LMS.Support
@using LMS.Utility
@using LMS.Models.ViewModels
@model ClassroomViewModel

@{
    ViewData["Title"] = "ClassRoom";

}

<div id="toolbar" class="row text-center container-fluid col-xl-12 backgroundWhite" style="width: 100%;font-size:0.9em">

    <input type="hidden" id="pdfUrl" data-url="@Model.CourseTopic.PDFContent" />
    <input type="hidden" id="cType" data-type="@Model.CourseTopic.ContentType" />
    <input type="hidden" value="@Model.ClassId" id="classId" />
    <input type="hidden" id="containsFA" data-form="@Model.ContainsFormative" />
    <input type="hidden" id="isLastTopic" name="isLastTopic" data-last="@Model.IsLastTopicInUnit" asp-for="@Model.IsLastTopicInUnit"/>
    <input type="hidden" id="topic" data-topic="@Model.CourseTopic.Id" />

    <div class="row " style="max-height:50px;margin:0 auto;padding-top:10px;padding-bottom:15px ">

        @if (Model.CourseTopic.ContentType == SD.ContentPDF)
        {
            <div id="prevb">
                <button class="btn btn-info text-white" id="prev" data-pager="prev"><i class="far fa-caret-square-left"></i> &nbsp;prev</button>

            </div>
            <div class="showHide" id="page-mode" style="text-align:center;">
                <div id="page-count-container showHide" style="padding-top:7px">Page <p class="showHide" style="display:inline" id="pdf-current-page"></p> of <p class="showHide" style="display:inline" id="pdf-total-pages"></p></div>
            </div>
            <div id="nextb">

                <button class="btn btn-info text-white" id="next" data-pager="next"> <i class="far fa-caret-square-right"></i> &nbsp;next</button>
            </div>}

        
        @if (Model.ContainsFormative == true && Model.TopicFANotComplete == true)
        {<div id="Formative">
                <button id="formative" class="btn btn-warning text-white" style="width:180px!Important" data-form="formative"><i class="fas fa-tasks"></i> &nbsp;Start Formative Test</button>
            </div>}
        else {<div id="Status">
    <button id="complete" class="btn btn-success text-white" style="width:130px!Important" data-complete="complete"><i class="far fa-check-circle"></i> &nbsp;Completed</button>
</div> }


        @*<span class="switch showHide" style="max-width:160px; padding-left:2%; position:relative">
            <input type="checkbox" class="switch" id="switch-normal">
            <label for="switch-normal">Dim</label>
        </span>*@
    </div>

    @if (Model.CourseTopic.ContentType == SD.ContentPDF)
    {
        //We handle the pdf content
        <div style="background:#13641c; color:#e5e4e4; text-transform:uppercase; margin:0 auto;width:91%">CLASS IN PROGRESS: @Model.CourseTopic.Name </div>
        <div class="col-sm-12 container-fluid" id="the-container">
            <div style="padding-top:65px;" id="pdf-loader">Loading Content ...</div><canvas id="the-canvas" style=""></canvas>
        </div>}
    else
    {
        //We handle the HTML content
        <div style="margin-top:10px; margin-bottom:60px;"></div>
        <div style="background:#13641c; color:#e5e4e4; text-transform:uppercase; margin:0 auto;width:97.2%">CLASS IN PROGRESS: @Model.CourseTopic.Name <i class="fas fa-arrow-right"></i> @Model.CourseTopic.Name   </div>
        <div class="col-sm-12 container-fluid" id="the-containerHtml">
            <div id="the-canvas2" style="margin-bottom:20px; margin-left:0px; margin-right:0px;  padding-top:0px; border: 1px solid #aeabab;background:#fafafa">


                @Html.Raw(Model.CourseTopic.CustomContent)
            </div>

        </div>
    }
</div>





@section Scripts{
    <link href="https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css"
          rel="stylesheet">

    <script src="https://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>


    <script src="~/js/pdf.js"></script>
    <script src="~/js/pdf.worker.js"></script>


    <script type="text/javascript">



        //BootBox on "Mark As Complete"
        $('#complete').on('click', function () {
            bootbox.confirm({
                title: "Are you sure?",
                message: "<P style='font-weight:600'>Do you want to mark this topic as complete?</p> You can view this topic content again in the course outline but not in the classroom. Click 'confirm' to continue",
                buttons: {
                    cancel: {
                        label: '<i class="fa fa-times"></i> Cancel'
                    },
                    confirm: {
                        label: '<i class="fa fa-check"></i> Confirm'
                    }
                },
                callback: function (result) {
                    if (result === true) {
                      
                        markTopicComplete();
                                      
                    }

                }
            });
        });



        var containsFA = $("#containsFA").data("form");
        var isLastTopic = $("#isLastTopic").data("last");
        var topic = $("#topic").data("topic");

        function markTopicComplete() {

            $.ajax({
                url: "/api/LearningSession/CompletedTopic/" + $('#classId').val() + "/" + topic + "/" + isLastTopic,
                type: "post", method: "post",
                cache: false,
                dataType: 'json',
                async: false,
                contentType: "application/json; charset=utf-8",
            });
             window.location.reload(true);
        };

        $('#formative').on('click', function () {
                bootbox.confirm({
                    title: "Start the Formative Assessment now?",
                    message: "You only have <strong>one</strong> attempt and it may count towards your final grade. You can also start it later from the course outline tab. <br>It's completion is required to continue with the course.  ",
                    buttons: {
                        cancel: {
                            label: '<i class="fa fa-times"></i> Cancel',
                            className: 'btn-danger',
                            size: 'large'

                        },
                        confirm: {
                            label: '<i class="fa fa-check"></i> Start Assessment',
                            className: 'btn-success',
                            size: 'large'

                        }
                    },
                    callback: function (result) {
                        if (result === true) {

                            getFormative();

                        }
                    }
                });
       });

        function getFormative() {
                   window.location.href = '@Url.Action("Formatives", "FormativeSession", new {topicId = Model.CourseTopic.Id })';
        };
        

        //Handles the Reading Mode Switch
        $('#switch-normal').on('click', function () {
            $('.search-background').toggleClass('lights-off').fadeOut;
            $('#prev, #back, #next, #complete, #formative').toggleClass('buttonDark');
            $('#toolbar').toggleClass('toolbarDark');
        });




        var page_no = 0;

        var type = $("#cType").data("type");
        if (type === "PDF") {

            var __PDF_DOC,
                __CURRENT_PAGE,
                __TOTAL_PAGES,
                __PAGE_RENDERING_IN_PROGRESS = 0,
                __CANVAS = $('#the-canvas').get(0),
                __CANVAS_CTX = __CANVAS.getContext('2d');

            var pdf_url = $("#pdfUrl").data("url");


            //Getting the Page number from DB to display
            $(document).ready(function () {
                $.ajax({
                    type: "GET",
                    url: "/api/LearningSession/GetPage",
                    dataType: "json",
                    cache: false,
                    contentType: "application/json; charset=utf-8",
                    data: {
                        Id: $('#classId').val()
                    },
                    success: function (data) {
                        //BEcause of async behaviour (not linear in nature), send data to external func to set val and render PDF
                        setPageRenderPDF(data);
                    }, //End of AJAX Success function
                    failure: function (data) {
                        alert(data.responseText);
                    }, //End of AJAX failure function
                    error: function (data) {
                        alert(data.responseText);
                    } //End of AJAX error function
                });


                //Function is called by the success method of ajax call, sets page value(from reponse data) and renders pdf

                function setPageRenderPDF(data) {
                    page_no = data;

                    pdfjsLib.getDocument({ url: pdf_url }).then(function (pdf_doc) {
                        __PDF_DOC = pdf_doc;
                        __TOTAL_PAGES = __PDF_DOC.numPages;

                        // Hide the pdf loader and show pdf container in HTML
                        $("#pdf-loader").hide();
                        $("#pdf-contents").show();
                        $("#pdf-total-pages").text(__TOTAL_PAGES);

                        // Show the first page
                        showPage(page_no);
                    }).catch(function (error) {
                        // If error re-show the upload button
                        $("#pdf-loader").hide();

                    });
                }


                function showPage(page_no) {
                    __PAGE_RENDERING_IN_PROGRESS = 1;
                    __CURRENT_PAGE = page_no;

                    // Disable Prev & Next buttons while page is being loaded
                    $("#next, #prev").attr('disabled', 'disabled');

                    // While page is being rendered hide the canvas and show a loading message
                    $("#the-canvas").hide();
                    $("#page-loader").show();

                    // Update current page in HTML
                    $("#pdf-current-page").text(page_no);

                    // Fetch the page
                    __PDF_DOC.getPage(page_no).then(function (page) {
                        // As the canvas is of a fixed width we need to set the scale of the viewport accordingly

                        var container = document.getElementById('the-container');

                        var viewport = page.getViewport(1.1);

                        var scale_required = container.clientWidth / viewport.width;

                        // Get viewport of the page at required scale
                        viewport = page.getViewport(scale_required);

                        // Set canvas height
                        __CANVAS.height = viewport.height;
                        __CANVAS.width = viewport.width;
                        var renderContext = {
                            canvasContext: __CANVAS_CTX,
                            viewport: viewport
                        };

                        // Render the page contents in the canvas
                        page.render(renderContext).then(function () {
                            __PAGE_RENDERING_IN_PROGRESS = 0;

                            // Re-enable Prev & Next buttons
                            $("#next, #prev").removeAttr('disabled');

                            // Show the canvas and hide the page loader
                            $("#the-canvas").show();
                            $("#page-loader").hide();
                        });
                    });
                }

                var newp = 0;

                $("#next").on("click", function () {

                    if (__CURRENT_PAGE != __TOTAL_PAGES)
                        newp = ++__CURRENT_PAGE;
                    showPage(__CURRENT_PAGE);

                    $.ajax({
                        url: "/api/LearningSession/SetPage/" + $('#classId').val() + "/" + newp,
                        type: "post", method: "post",
                        cache: false,
                        dataType: 'json',
                        async: true,
                        contentType: "application/json; charset=utf-8",
                    })
                });

                $("#prev").on("click", function () {

                    if (__CURRENT_PAGE != 1)
                        newp = --__CURRENT_PAGE;
                    showPage(__CURRENT_PAGE);

                    $.ajax({
                        url: "/api/LearningSession/SetPage/" + $('#classId').val() + "/" + newp,
                        type: "post", method: "post",
                        cache: false,
                        dataType: 'json',
                        async: true,
                        contentType: "application/json; charset=utf-8",
                    })
                });
            });
        }




        window.onresize = function () {

            location.reload();
        }



    </script>





}

